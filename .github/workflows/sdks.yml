name: SDKs

permissions:
  contents: write

on:
  workflow_call:
    inputs:
      checkout-hash:
        required: false
        type: string
      target-repo:
        required: false
        type: string
  push:
    tags:
      - "v*.*.*"
    branches:
      - ci
jobs:
  android-build:
    runs-on: ubuntu-latest
    env:
      ANDROID_API_LEVEL: 24
      SWIFT_TAG: swift-5.8-RELEASE
      SWIFT_TAG_LOWER: swift-5.8-release
      ANDROID_ARCH: aarch64
    steps:
        - name: verify input
          run: |
            echo "target repo: ${{ inputs.target-repo }}"
            echo "hash: ${{ inputs.checkout-hash }}"
        - name: Get latest toolchain
          run: |
            SWIFT_BRANCH="${SWIFT_TAG} | cut -d- -f2)-release"
            cd
            wget -q https://download.swift.org/${SWIFT_TAG_LOWER}/ubuntu2204/${SWIFT_TAG}/${SWIFT_TAG}-ubuntu22.04.tar.gz
            echo "got latest toolchain: ${SWIFT_TAG}"
        - name: Clone
          uses: actions/checkout@v3
          with:
            path: sdk-config
        - name: Validate SDK Config
          if: "${{ inputs.target-repo != '' }}"
          run: |
            echo 'cloned another repo, moving'
            REPO_NAME=$(basename ${{ inputs.target-repo }})
            mkdir ${REPO_NAME}
            mv sdk-config ${REPO_NAME}
            git clone --branch ci https://github.com/Swift-Commons/swift-android-sdk
            mv swift-android-sdk sdk-config
        - name: Build Swift release Android SDK if not the latest
          run: |
            cd sdk-config
            sudo apt install ninja-build
            BUILD_SWIFT_PM=1 swift get-packages-and-swift-source.swift

            SDK_NAME=$(ls | grep swift-release-android-${ANDROID_ARCH})
            SDK=`pwd`/$SDK_NAME

            tar xf ~/${SWIFT_TAG}-ubuntu22.04.tar.gz
            git apply swift-android.patch swift-android-ci.patch
            sed -i "s%/data/data/com.termux/files%$SDK%" $SDK/usr/lib/pkgconfig/sqlite3.pc
            sed -i "s%clang-path\", self.toolchain.cc,%clang-path\", os.path.join(toolchain_path, 'bin', 'clang'),%" swift/utils/swift_build_support/swift_build_support/products/swiftpm.py

            sed -i "s%String(cString: getpass%\"fake\" //%" swiftpm/Sources/PackageRegistryTool/SwiftPackageRegistryTool.swift

            ./swift/utils/build-script -RA --skip-build-cmark --build-llvm=0 --android --android-ndk $ANDROID_NDK --android-arch ${ANDROID_ARCH} --android-api-level ${ANDROID_API_LEVEL} --build-swift-tools=0 --native-swift-tools-path=`pwd`/${SWIFT_TAG}-ubuntu22.04/usr/bin --native-clang-tools-path=`pwd`/$SWIFT_TAG-ubuntu22.04/usr/bin --cross-compile-hosts=android-${ANDROID_ARCH} --cross-compile-deps-path=$SDK --skip-local-build --build-swift-static-stdlib --xctest --skip-early-swift-driver --install-swift --install-libdispatch --install-foundation --install-xctest --install-destdir=$SDK --swift-install-components='clang-resource-dir-symlink;license;stdlib;sdk-overlay' --cross-compile-append-host-target-to-destdir=False -b -p --install-llbuild --sourcekit-lsp --skip-early-swiftsyntax

            cp $ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/$(echo ${ANDROID_ARCH} | sed "s/v7//")-linux-android*/libc++_shared.so $SDK/usr/lib
            patchelf --set-rpath \$ORIGIN $SDK/usr/lib/swift/android/libdispatch.so
            patchelf --set-rpath \$ORIGIN/../..:\$ORIGIN $SDK/usr/lib/swift/android/lib[FXs]*.so

            echo "current dir"
            ls
            echo "home dir"
            ls ~/
            tar cJf ~/$SDK_NAME.tar.xz $SDK_NAME
            rm -rf $SDK_NAME
            echo "post rm current dir"
            ls
            echo "post home dir"
            ls ~/
            echo "home dir full path"
            cd ~/
            pwd
        - name: Release
          uses: softprops/action-gh-release@v1
          if: startsWith(github.ref, 'refs/tags/')
          with:
            files: |
              /home/runner/swift-5.8-RELEASE-ubuntu22.04.tar.gz
              /home/runner/swift-release-android-aarch64-24-sdk.tar.xz
        - name: Unpack release toolchain and SDK
          id: sdk-unpack
          run: |
            cd sdk-config

            if [ ! -d ${SWIFT_TAG}-ubuntu22.04 ]; then
              tar xf ~/${SWIFT_TAG}-ubuntu22.04.tar.gz
            fi

            tar xf ~/swift-release-android-${ANDROID_ARCH}*-${ANDROID_API_LEVEL}-sdk.tar.xz
        - name: Get Swift Argument Parser package
          uses: actions/checkout@v3
          if: "${{ inputs.target-repo == '' }}"
          with:
            repository: apple/swift-argument-parser
            path: swift-argument-parser
        - name: Build Swift Argument Parser package
          if: "${{ inputs.target-repo == '' }}"
          run: |
            cd swift-argument-parser
            ../sdk-config/${SWIFT_TAG}-ubuntu22.04/usr/bin/swift build --build-tests --destination ../sdk-config/swift-release-*-sdk/usr/swiftpm-android-${ANDROID_ARCH}.json -Xlinker -rpath -Xlinker \$ORIGIN/lib/swift/android
        - name: Build Supplied Repo ${{ inputs.target-repo }}
          if: "${{ inputs.target-repo != '' }}"
          run: |
            REPO_NAME=$(basename ${{ inputs.target-repo }})
            echo ${REPO_NAME}
            mv ${REPO_NAME}/sdk-config ${REPO_NAME}_temp
            rm -rf ${REPO_NAME}
            mv ${REPO_NAME}_temp ${REPO_NAME}
            cd ${REPO_NAME}/
            ../sdk-config/${SWIFT_TAG}-ubuntu22.04/usr/bin/swift build --build-tests --destination ../sdk-config/swift-release-*-sdk/usr/swiftpm-android-${ANDROID_ARCH}.json -Xlinker -rpath -Xlinker \$ORIGIN/lib/swift/android